// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum ImageTypes {
  gif
  jpg
  jpeg
  png
  svg
  webm
}

model Organization {
  id   String @id @default(uuid())
  name String

  membership Membership[]
  Tag        Tag[]
  Question   Question[]
  Image      Image[]
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  role           GlobalRole
  tokens         Token[]
  sessions       Session[]
  imagesCreated  Image[]
  Tag            Tag[]
  memberships    Membership[]
  Question       Question[]
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Question {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String
  Choice         Choice[]
  createdBy      User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  userId         String
}

model Choice {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  votes      Int      @default(0)
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Image {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      User         @relation(fields: [userId], references: [id])
  nameFile       String
  caption        String
  description    String?
  type           ImageTypes
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Tag {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  id             String       @id @default(uuid())
  createdBy      User         @relation(fields: [userId], references: [id])
  name           String
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}
